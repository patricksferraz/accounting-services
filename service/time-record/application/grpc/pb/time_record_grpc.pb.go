// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeRecordServiceClient is the client API for TimeRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeRecordServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*Response, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*TimeRecord, error)
	FindAllByEmployeeID(ctx context.Context, in *FindAllByEmployeeIDRequest, opts ...grpc.CallOption) (TimeRecordService_FindAllByEmployeeIDClient, error)
}

type timeRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeRecordServiceClient(cc grpc.ClientConnInterface) TimeRecordServiceClient {
	return &timeRecordServiceClient{cc}
}

func (c *timeRecordServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/github.com.patricksferraz.accountingServices.TimeRecordService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeRecordServiceClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/github.com.patricksferraz.accountingServices.TimeRecordService/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeRecordServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*TimeRecord, error) {
	out := new(TimeRecord)
	err := c.cc.Invoke(ctx, "/github.com.patricksferraz.accountingServices.TimeRecordService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeRecordServiceClient) FindAllByEmployeeID(ctx context.Context, in *FindAllByEmployeeIDRequest, opts ...grpc.CallOption) (TimeRecordService_FindAllByEmployeeIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeRecordService_ServiceDesc.Streams[0], "/github.com.patricksferraz.accountingServices.TimeRecordService/FindAllByEmployeeID", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeRecordServiceFindAllByEmployeeIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeRecordService_FindAllByEmployeeIDClient interface {
	Recv() (*TimeRecord, error)
	grpc.ClientStream
}

type timeRecordServiceFindAllByEmployeeIDClient struct {
	grpc.ClientStream
}

func (x *timeRecordServiceFindAllByEmployeeIDClient) Recv() (*TimeRecord, error) {
	m := new(TimeRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeRecordServiceServer is the server API for TimeRecordService service.
// All implementations must embed UnimplementedTimeRecordServiceServer
// for forward compatibility
type TimeRecordServiceServer interface {
	Register(context.Context, *RegisterRequest) (*Response, error)
	Approve(context.Context, *ApproveRequest) (*Response, error)
	Find(context.Context, *FindRequest) (*TimeRecord, error)
	FindAllByEmployeeID(*FindAllByEmployeeIDRequest, TimeRecordService_FindAllByEmployeeIDServer) error
	mustEmbedUnimplementedTimeRecordServiceServer()
}

// UnimplementedTimeRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeRecordServiceServer struct {
}

func (UnimplementedTimeRecordServiceServer) Register(context.Context, *RegisterRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTimeRecordServiceServer) Approve(context.Context, *ApproveRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedTimeRecordServiceServer) Find(context.Context, *FindRequest) (*TimeRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedTimeRecordServiceServer) FindAllByEmployeeID(*FindAllByEmployeeIDRequest, TimeRecordService_FindAllByEmployeeIDServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAllByEmployeeID not implemented")
}
func (UnimplementedTimeRecordServiceServer) mustEmbedUnimplementedTimeRecordServiceServer() {}

// UnsafeTimeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeRecordServiceServer will
// result in compilation errors.
type UnsafeTimeRecordServiceServer interface {
	mustEmbedUnimplementedTimeRecordServiceServer()
}

func RegisterTimeRecordServiceServer(s grpc.ServiceRegistrar, srv TimeRecordServiceServer) {
	s.RegisterService(&TimeRecordService_ServiceDesc, srv)
}

func _TimeRecordService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.patricksferraz.accountingServices.TimeRecordService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeRecordService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.patricksferraz.accountingServices.TimeRecordService/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeRecordService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.patricksferraz.accountingServices.TimeRecordService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeRecordService_FindAllByEmployeeID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllByEmployeeIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeRecordServiceServer).FindAllByEmployeeID(m, &timeRecordServiceFindAllByEmployeeIDServer{stream})
}

type TimeRecordService_FindAllByEmployeeIDServer interface {
	Send(*TimeRecord) error
	grpc.ServerStream
}

type timeRecordServiceFindAllByEmployeeIDServer struct {
	grpc.ServerStream
}

func (x *timeRecordServiceFindAllByEmployeeIDServer) Send(m *TimeRecord) error {
	return x.ServerStream.SendMsg(m)
}

// TimeRecordService_ServiceDesc is the grpc.ServiceDesc for TimeRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.patricksferraz.accountingServices.TimeRecordService",
	HandlerType: (*TimeRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _TimeRecordService_Register_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _TimeRecordService_Approve_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _TimeRecordService_Find_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindAllByEmployeeID",
			Handler:       _TimeRecordService_FindAllByEmployeeID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "time_record.proto",
}
