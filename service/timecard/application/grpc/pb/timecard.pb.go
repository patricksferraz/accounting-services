// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: timecard.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimecardRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date       string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	CompanyId  string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
	EmployeeId string `protobuf:"bytes,3,opt,name=employeeId,proto3" json:"employeeId,omitempty"`
}

func (x *TimecardRegister) Reset() {
	*x = TimecardRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timecard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimecardRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimecardRegister) ProtoMessage() {}

func (x *TimecardRegister) ProtoReflect() protoreflect.Message {
	mi := &file_timecard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimecardRegister.ProtoReflect.Descriptor instead.
func (*TimecardRegister) Descriptor() ([]byte, []int) {
	return file_timecard_proto_rawDescGZIP(), []int{0}
}

func (x *TimecardRegister) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *TimecardRegister) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *TimecardRegister) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

type TimeRecordRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	TimecardId string `protobuf:"bytes,2,opt,name=timecardId,proto3" json:"timecardId,omitempty"`
}

func (x *TimeRecordRegister) Reset() {
	*x = TimeRecordRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timecard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRecordRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRecordRegister) ProtoMessage() {}

func (x *TimeRecordRegister) ProtoReflect() protoreflect.Message {
	mi := &file_timecard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRecordRegister.ProtoReflect.Descriptor instead.
func (*TimeRecordRegister) Descriptor() ([]byte, []int) {
	return file_timecard_proto_rawDescGZIP(), []int{1}
}

func (x *TimeRecordRegister) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *TimeRecordRegister) GetTimecardId() string {
	if x != nil {
		return x.TimecardId
	}
	return ""
}

type ResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResultInfo) Reset() {
	*x = ResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timecard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultInfo) ProtoMessage() {}

func (x *ResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_timecard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultInfo.ProtoReflect.Descriptor instead.
func (*ResultInfo) Descriptor() ([]byte, []int) {
	return file_timecard_proto_rawDescGZIP(), []int{2}
}

func (x *ResultInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ResultInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Timecard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Timecard) Reset() {
	*x = Timecard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timecard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timecard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timecard) ProtoMessage() {}

func (x *Timecard) ProtoReflect() protoreflect.Message {
	mi := &file_timecard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timecard.ProtoReflect.Descriptor instead.
func (*Timecard) Descriptor() ([]byte, []int) {
	return file_timecard_proto_rawDescGZIP(), []int{3}
}

func (x *Timecard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TimecardByCompanyID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (x *TimecardByCompanyID) Reset() {
	*x = TimecardByCompanyID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timecard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimecardByCompanyID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimecardByCompanyID) ProtoMessage() {}

func (x *TimecardByCompanyID) ProtoReflect() protoreflect.Message {
	mi := &file_timecard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimecardByCompanyID.ProtoReflect.Descriptor instead.
func (*TimecardByCompanyID) Descriptor() ([]byte, []int) {
	return file_timecard_proto_rawDescGZIP(), []int{4}
}

func (x *TimecardByCompanyID) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type TimecardByEmployeeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeId string `protobuf:"bytes,1,opt,name=employeeId,proto3" json:"employeeId,omitempty"`
}

func (x *TimecardByEmployeeID) Reset() {
	*x = TimecardByEmployeeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timecard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimecardByEmployeeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimecardByEmployeeID) ProtoMessage() {}

func (x *TimecardByEmployeeID) ProtoReflect() protoreflect.Message {
	mi := &file_timecard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimecardByEmployeeID.ProtoReflect.Descriptor instead.
func (*TimecardByEmployeeID) Descriptor() ([]byte, []int) {
	return file_timecard_proto_rawDescGZIP(), []int{5}
}

func (x *TimecardByEmployeeID) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

type TimeRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time       string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	TimecardId string `protobuf:"bytes,3,opt,name=timecardId,proto3" json:"timecardId,omitempty"`
	CreatedAt  string `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  string `protobuf:"bytes,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *TimeRecordInfo) Reset() {
	*x = TimeRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timecard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRecordInfo) ProtoMessage() {}

func (x *TimeRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_timecard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRecordInfo.ProtoReflect.Descriptor instead.
func (*TimeRecordInfo) Descriptor() ([]byte, []int) {
	return file_timecard_proto_rawDescGZIP(), []int{6}
}

func (x *TimeRecordInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TimeRecordInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *TimeRecordInfo) GetTimecardId() string {
	if x != nil {
		return x.TimecardId
	}
	return ""
}

func (x *TimeRecordInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TimeRecordInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type TimecardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Date        string            `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	CompanyId   string            `protobuf:"bytes,3,opt,name=companyId,proto3" json:"companyId,omitempty"`
	EmployeeId  string            `protobuf:"bytes,4,opt,name=employeeId,proto3" json:"employeeId,omitempty"`
	TimeRecords []*TimeRecordInfo `protobuf:"bytes,5,rep,name=timeRecords,proto3" json:"timeRecords,omitempty"`
	CreatedAt   string            `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   string            `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *TimecardInfo) Reset() {
	*x = TimecardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timecard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimecardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimecardInfo) ProtoMessage() {}

func (x *TimecardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_timecard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimecardInfo.ProtoReflect.Descriptor instead.
func (*TimecardInfo) Descriptor() ([]byte, []int) {
	return file_timecard_proto_rawDescGZIP(), []int{7}
}

func (x *TimecardInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TimecardInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *TimecardInfo) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *TimecardInfo) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *TimecardInfo) GetTimeRecords() []*TimeRecordInfo {
	if x != nil {
		return x.TimeRecords
	}
	return nil
}

func (x *TimecardInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TimecardInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_timecard_proto protoreflect.FileDescriptor

var file_timecard_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x12,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33,
	0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x42,
	0x79, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x84,
	0x02, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49,
	0x64, 0x12, 0x56, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0x9b, 0x07, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x36, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x80, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72,
	0x69, 0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7c, 0x0a, 0x18, 0x57, 0x61,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x73, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x1a, 0x30, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x72, 0x0a,
	0x0c, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x1a, 0x32, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x12, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61,
	0x74, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x1a, 0x32, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x30,
	0x01, 0x12, 0x8f, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x42, 0x79, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49,
	0x44, 0x12, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x61, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x42, 0x79, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x1a, 0x32, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x74, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x66, 0x65, 0x72, 0x72, 0x61, 0x7a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_timecard_proto_rawDescOnce sync.Once
	file_timecard_proto_rawDescData = file_timecard_proto_rawDesc
)

func file_timecard_proto_rawDescGZIP() []byte {
	file_timecard_proto_rawDescOnce.Do(func() {
		file_timecard_proto_rawDescData = protoimpl.X.CompressGZIP(file_timecard_proto_rawDescData)
	})
	return file_timecard_proto_rawDescData
}

var file_timecard_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_timecard_proto_goTypes = []interface{}{
	(*TimecardRegister)(nil),     // 0: github.com.patricksferraz.checkpoint.TimecardRegister
	(*TimeRecordRegister)(nil),   // 1: github.com.patricksferraz.checkpoint.TimeRecordRegister
	(*ResultInfo)(nil),           // 2: github.com.patricksferraz.checkpoint.ResultInfo
	(*Timecard)(nil),             // 3: github.com.patricksferraz.checkpoint.Timecard
	(*TimecardByCompanyID)(nil),  // 4: github.com.patricksferraz.checkpoint.TimecardByCompanyID
	(*TimecardByEmployeeID)(nil), // 5: github.com.patricksferraz.checkpoint.TimecardByEmployeeID
	(*TimeRecordInfo)(nil),       // 6: github.com.patricksferraz.checkpoint.TimeRecordInfo
	(*TimecardInfo)(nil),         // 7: github.com.patricksferraz.checkpoint.TimecardInfo
}
var file_timecard_proto_depIdxs = []int32{
	6, // 0: github.com.patricksferraz.checkpoint.TimecardInfo.timeRecords:type_name -> github.com.patricksferraz.checkpoint.TimeRecordInfo
	0, // 1: github.com.patricksferraz.checkpoint.TimecardService.RegisterTimecard:input_type -> github.com.patricksferraz.checkpoint.TimecardRegister
	1, // 2: github.com.patricksferraz.checkpoint.TimecardService.RegisterTimeRecord:input_type -> github.com.patricksferraz.checkpoint.TimeRecordRegister
	3, // 3: github.com.patricksferraz.checkpoint.TimecardService.WaitConfirmationTimecard:input_type -> github.com.patricksferraz.checkpoint.Timecard
	3, // 4: github.com.patricksferraz.checkpoint.TimecardService.ConfirmTimecard:input_type -> github.com.patricksferraz.checkpoint.Timecard
	3, // 5: github.com.patricksferraz.checkpoint.TimecardService.FindTimecard:input_type -> github.com.patricksferraz.checkpoint.Timecard
	4, // 6: github.com.patricksferraz.checkpoint.TimecardService.FindAllTimecardByCompanyID:input_type -> github.com.patricksferraz.checkpoint.TimecardByCompanyID
	5, // 7: github.com.patricksferraz.checkpoint.TimecardService.FindAllTimecardByEmployeeID:input_type -> github.com.patricksferraz.checkpoint.TimecardByEmployeeID
	2, // 8: github.com.patricksferraz.checkpoint.TimecardService.RegisterTimecard:output_type -> github.com.patricksferraz.checkpoint.ResultInfo
	2, // 9: github.com.patricksferraz.checkpoint.TimecardService.RegisterTimeRecord:output_type -> github.com.patricksferraz.checkpoint.ResultInfo
	2, // 10: github.com.patricksferraz.checkpoint.TimecardService.WaitConfirmationTimecard:output_type -> github.com.patricksferraz.checkpoint.ResultInfo
	2, // 11: github.com.patricksferraz.checkpoint.TimecardService.ConfirmTimecard:output_type -> github.com.patricksferraz.checkpoint.ResultInfo
	7, // 12: github.com.patricksferraz.checkpoint.TimecardService.FindTimecard:output_type -> github.com.patricksferraz.checkpoint.TimecardInfo
	7, // 13: github.com.patricksferraz.checkpoint.TimecardService.FindAllTimecardByCompanyID:output_type -> github.com.patricksferraz.checkpoint.TimecardInfo
	7, // 14: github.com.patricksferraz.checkpoint.TimecardService.FindAllTimecardByEmployeeID:output_type -> github.com.patricksferraz.checkpoint.TimecardInfo
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_timecard_proto_init() }
func file_timecard_proto_init() {
	if File_timecard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_timecard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimecardRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timecard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRecordRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timecard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timecard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timecard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timecard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimecardByCompanyID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timecard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimecardByEmployeeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timecard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timecard_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimecardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_timecard_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_timecard_proto_goTypes,
		DependencyIndexes: file_timecard_proto_depIdxs,
		MessageInfos:      file_timecard_proto_msgTypes,
	}.Build()
	File_timecard_proto = out.File
	file_timecard_proto_rawDesc = nil
	file_timecard_proto_goTypes = nil
	file_timecard_proto_depIdxs = nil
}
