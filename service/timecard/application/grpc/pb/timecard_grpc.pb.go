// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimecardServiceClient is the client API for TimecardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimecardServiceClient interface {
	RegisterTimecard(ctx context.Context, in *TimecardRegister, opts ...grpc.CallOption) (*ResultInfo, error)
	RegisterTimeRecord(ctx context.Context, in *TimeRecordRegister, opts ...grpc.CallOption) (*ResultInfo, error)
	WaitConfirmationTimecard(ctx context.Context, in *Timecard, opts ...grpc.CallOption) (*ResultInfo, error)
	ConfirmTimecard(ctx context.Context, in *Timecard, opts ...grpc.CallOption) (*ResultInfo, error)
	FindTimecard(ctx context.Context, in *Timecard, opts ...grpc.CallOption) (*TimecardInfo, error)
	FindAllTimecardByCompanyID(ctx context.Context, in *TimecardByCompanyID, opts ...grpc.CallOption) (TimecardService_FindAllTimecardByCompanyIDClient, error)
	FindAllTimecardByEmployeeID(ctx context.Context, in *TimecardByEmployeeID, opts ...grpc.CallOption) (TimecardService_FindAllTimecardByEmployeeIDClient, error)
}

type timecardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimecardServiceClient(cc grpc.ClientConnInterface) TimecardServiceClient {
	return &timecardServiceClient{cc}
}

func (c *timecardServiceClient) RegisterTimecard(ctx context.Context, in *TimecardRegister, opts ...grpc.CallOption) (*ResultInfo, error) {
	out := new(ResultInfo)
	err := c.cc.Invoke(ctx, "/github.com.patricksferraz.checkpoint.TimecardService/RegisterTimecard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timecardServiceClient) RegisterTimeRecord(ctx context.Context, in *TimeRecordRegister, opts ...grpc.CallOption) (*ResultInfo, error) {
	out := new(ResultInfo)
	err := c.cc.Invoke(ctx, "/github.com.patricksferraz.checkpoint.TimecardService/RegisterTimeRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timecardServiceClient) WaitConfirmationTimecard(ctx context.Context, in *Timecard, opts ...grpc.CallOption) (*ResultInfo, error) {
	out := new(ResultInfo)
	err := c.cc.Invoke(ctx, "/github.com.patricksferraz.checkpoint.TimecardService/WaitConfirmationTimecard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timecardServiceClient) ConfirmTimecard(ctx context.Context, in *Timecard, opts ...grpc.CallOption) (*ResultInfo, error) {
	out := new(ResultInfo)
	err := c.cc.Invoke(ctx, "/github.com.patricksferraz.checkpoint.TimecardService/ConfirmTimecard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timecardServiceClient) FindTimecard(ctx context.Context, in *Timecard, opts ...grpc.CallOption) (*TimecardInfo, error) {
	out := new(TimecardInfo)
	err := c.cc.Invoke(ctx, "/github.com.patricksferraz.checkpoint.TimecardService/FindTimecard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timecardServiceClient) FindAllTimecardByCompanyID(ctx context.Context, in *TimecardByCompanyID, opts ...grpc.CallOption) (TimecardService_FindAllTimecardByCompanyIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimecardService_ServiceDesc.Streams[0], "/github.com.patricksferraz.checkpoint.TimecardService/FindAllTimecardByCompanyID", opts...)
	if err != nil {
		return nil, err
	}
	x := &timecardServiceFindAllTimecardByCompanyIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimecardService_FindAllTimecardByCompanyIDClient interface {
	Recv() (*TimecardInfo, error)
	grpc.ClientStream
}

type timecardServiceFindAllTimecardByCompanyIDClient struct {
	grpc.ClientStream
}

func (x *timecardServiceFindAllTimecardByCompanyIDClient) Recv() (*TimecardInfo, error) {
	m := new(TimecardInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timecardServiceClient) FindAllTimecardByEmployeeID(ctx context.Context, in *TimecardByEmployeeID, opts ...grpc.CallOption) (TimecardService_FindAllTimecardByEmployeeIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimecardService_ServiceDesc.Streams[1], "/github.com.patricksferraz.checkpoint.TimecardService/FindAllTimecardByEmployeeID", opts...)
	if err != nil {
		return nil, err
	}
	x := &timecardServiceFindAllTimecardByEmployeeIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimecardService_FindAllTimecardByEmployeeIDClient interface {
	Recv() (*TimecardInfo, error)
	grpc.ClientStream
}

type timecardServiceFindAllTimecardByEmployeeIDClient struct {
	grpc.ClientStream
}

func (x *timecardServiceFindAllTimecardByEmployeeIDClient) Recv() (*TimecardInfo, error) {
	m := new(TimecardInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimecardServiceServer is the server API for TimecardService service.
// All implementations must embed UnimplementedTimecardServiceServer
// for forward compatibility
type TimecardServiceServer interface {
	RegisterTimecard(context.Context, *TimecardRegister) (*ResultInfo, error)
	RegisterTimeRecord(context.Context, *TimeRecordRegister) (*ResultInfo, error)
	WaitConfirmationTimecard(context.Context, *Timecard) (*ResultInfo, error)
	ConfirmTimecard(context.Context, *Timecard) (*ResultInfo, error)
	FindTimecard(context.Context, *Timecard) (*TimecardInfo, error)
	FindAllTimecardByCompanyID(*TimecardByCompanyID, TimecardService_FindAllTimecardByCompanyIDServer) error
	FindAllTimecardByEmployeeID(*TimecardByEmployeeID, TimecardService_FindAllTimecardByEmployeeIDServer) error
	mustEmbedUnimplementedTimecardServiceServer()
}

// UnimplementedTimecardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimecardServiceServer struct {
}

func (UnimplementedTimecardServiceServer) RegisterTimecard(context.Context, *TimecardRegister) (*ResultInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTimecard not implemented")
}
func (UnimplementedTimecardServiceServer) RegisterTimeRecord(context.Context, *TimeRecordRegister) (*ResultInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTimeRecord not implemented")
}
func (UnimplementedTimecardServiceServer) WaitConfirmationTimecard(context.Context, *Timecard) (*ResultInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitConfirmationTimecard not implemented")
}
func (UnimplementedTimecardServiceServer) ConfirmTimecard(context.Context, *Timecard) (*ResultInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTimecard not implemented")
}
func (UnimplementedTimecardServiceServer) FindTimecard(context.Context, *Timecard) (*TimecardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTimecard not implemented")
}
func (UnimplementedTimecardServiceServer) FindAllTimecardByCompanyID(*TimecardByCompanyID, TimecardService_FindAllTimecardByCompanyIDServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAllTimecardByCompanyID not implemented")
}
func (UnimplementedTimecardServiceServer) FindAllTimecardByEmployeeID(*TimecardByEmployeeID, TimecardService_FindAllTimecardByEmployeeIDServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAllTimecardByEmployeeID not implemented")
}
func (UnimplementedTimecardServiceServer) mustEmbedUnimplementedTimecardServiceServer() {}

// UnsafeTimecardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimecardServiceServer will
// result in compilation errors.
type UnsafeTimecardServiceServer interface {
	mustEmbedUnimplementedTimecardServiceServer()
}

func RegisterTimecardServiceServer(s grpc.ServiceRegistrar, srv TimecardServiceServer) {
	s.RegisterService(&TimecardService_ServiceDesc, srv)
}

func _TimecardService_RegisterTimecard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimecardRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimecardServiceServer).RegisterTimecard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.patricksferraz.checkpoint.TimecardService/RegisterTimecard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimecardServiceServer).RegisterTimecard(ctx, req.(*TimecardRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimecardService_RegisterTimeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRecordRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimecardServiceServer).RegisterTimeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.patricksferraz.checkpoint.TimecardService/RegisterTimeRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimecardServiceServer).RegisterTimeRecord(ctx, req.(*TimeRecordRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimecardService_WaitConfirmationTimecard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timecard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimecardServiceServer).WaitConfirmationTimecard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.patricksferraz.checkpoint.TimecardService/WaitConfirmationTimecard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimecardServiceServer).WaitConfirmationTimecard(ctx, req.(*Timecard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimecardService_ConfirmTimecard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timecard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimecardServiceServer).ConfirmTimecard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.patricksferraz.checkpoint.TimecardService/ConfirmTimecard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimecardServiceServer).ConfirmTimecard(ctx, req.(*Timecard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimecardService_FindTimecard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timecard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimecardServiceServer).FindTimecard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.patricksferraz.checkpoint.TimecardService/FindTimecard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimecardServiceServer).FindTimecard(ctx, req.(*Timecard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimecardService_FindAllTimecardByCompanyID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimecardByCompanyID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimecardServiceServer).FindAllTimecardByCompanyID(m, &timecardServiceFindAllTimecardByCompanyIDServer{stream})
}

type TimecardService_FindAllTimecardByCompanyIDServer interface {
	Send(*TimecardInfo) error
	grpc.ServerStream
}

type timecardServiceFindAllTimecardByCompanyIDServer struct {
	grpc.ServerStream
}

func (x *timecardServiceFindAllTimecardByCompanyIDServer) Send(m *TimecardInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _TimecardService_FindAllTimecardByEmployeeID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimecardByEmployeeID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimecardServiceServer).FindAllTimecardByEmployeeID(m, &timecardServiceFindAllTimecardByEmployeeIDServer{stream})
}

type TimecardService_FindAllTimecardByEmployeeIDServer interface {
	Send(*TimecardInfo) error
	grpc.ServerStream
}

type timecardServiceFindAllTimecardByEmployeeIDServer struct {
	grpc.ServerStream
}

func (x *timecardServiceFindAllTimecardByEmployeeIDServer) Send(m *TimecardInfo) error {
	return x.ServerStream.SendMsg(m)
}

// TimecardService_ServiceDesc is the grpc.ServiceDesc for TimecardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimecardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.patricksferraz.checkpoint.TimecardService",
	HandlerType: (*TimecardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTimecard",
			Handler:    _TimecardService_RegisterTimecard_Handler,
		},
		{
			MethodName: "RegisterTimeRecord",
			Handler:    _TimecardService_RegisterTimeRecord_Handler,
		},
		{
			MethodName: "WaitConfirmationTimecard",
			Handler:    _TimecardService_WaitConfirmationTimecard_Handler,
		},
		{
			MethodName: "ConfirmTimecard",
			Handler:    _TimecardService_ConfirmTimecard_Handler,
		},
		{
			MethodName: "FindTimecard",
			Handler:    _TimecardService_FindTimecard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindAllTimecardByCompanyID",
			Handler:       _TimecardService_FindAllTimecardByCompanyID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllTimecardByEmployeeID",
			Handler:       _TimecardService_FindAllTimecardByEmployeeID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "timecard.proto",
}
